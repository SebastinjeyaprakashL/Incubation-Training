import java.util.*;
import java.io.*;
import java.text.*;
import java.text.DateFormat;  
import java.text.SimpleDateFormat;  
import java.util.Date;  
import java.util.Calendar; 

public class MVPSuperMarket 
{
	void assign_ID(File Vegetable_Id)
	{ int i=0;
	Map <String,Integer> hm=new HashMap<String,Integer>();
		Map<String,Integer> m=new HashMap<String,Integer>();
		BufferedReader br=null;
		try{
			File file= Vegetable_Id;
			if(!file.exists()) 
		 {
            file.createNewFile();
         }
			br=new BufferedReader(new FileReader(file));
			String line="";
			while((line=br.readLine())!=null){
				String[] part=line.split(":");
				String name = part[0].trim();
                Integer ID = Integer.parseInt( part[1].trim()) ;
				if( !name.equals("") && !ID.equals("") )
                    m.put(name,ID);
			}
			for(Map.Entry<String, Integer> entry : m.entrySet())
			{ i=i+1;
             hm.put(entry.getKey(),entry.getValue());
		}
	}
	catch(Exception e){
            e.printStackTrace();
        }finally{
            if(br != null){
                try { 
                    br.close(); 
                }catch(Exception e){};
            }
        }
		Scanner sc =new Scanner(System.in);
		boolean more=true;
		do{ i=i+1;
			System.out.println("enter the vegetable name");
			String veg=sc.nextLine().toUpperCase();
			hm.put(veg,i);
			
			System.out.println("Do you want to add more vegetable (enter 'y'or 'n'):");
			more=sc.next().toUpperCase().charAt(0)=='Y'; 
			sc.nextLine();
		}while(more);
		Map<String,Integer> map = new TreeMap<String,Integer>(hm); 
        BufferedWriter bf = null;
		try{
            File file= Vegetable_Id;
         if(!file.exists()) 
		 {
            file.createNewFile();
         }
           bf = new BufferedWriter( new FileWriter(file) );   //create new BufferedWriter for the output file
             for(Map.Entry<String,Integer> entry : map.entrySet()){   //iterating map entries
                bf.write( entry.getKey() + ":" + entry.getValue() );   //put key and value separated by a colon
                bf.newLine();
            }
            bf.flush();
			}catch(IOException e){
            e.printStackTrace();
			}finally{
            try{
			bf.close();
            }catch(Exception e){}
        }
		
		 }
	void set_Price(File Vegetable_Id,File Unit_price ){
		Map<String,Integer> data=new TreeMap<String,Integer>();
		BufferedReader br=null;
		try{
			File file= Vegetable_Id;
			br=new BufferedReader(new FileReader(file));
			String line="";
			while((line=br.readLine())!=null){
				String[] part=line.split(":");
				String name = part[0].trim();
                Integer ID = Integer.parseInt( part[1].trim()) ;
				if( !name.equals("") && !ID.equals("") )
                    data.put(name,ID);
			}
	}
	catch(Exception e){
            e.printStackTrace();
        }finally{
            if(br != null){
                try { 
                    br.close(); 
                }catch(Exception e){};
            }
		}
		Map<Integer,Double> m=new TreeMap<Integer,Double>();
		br=null;
		try{
			File file1= Unit_price;
			if(!file1.exists()) 
		 {
            file1.createNewFile();
         }
			br=new BufferedReader(new FileReader(file1));
			String line="";
			while((line=br.readLine())!=null){
				String[] part=line.split(":");
				Integer ID = Integer.parseInt( part[0].trim()) ;
                Double price = Double.parseDouble( part[1].trim()) ;
				if( !ID.equals("") && !price.equals("") )
                    m.put(ID,price);
			}
	}
	catch(Exception e){
            e.printStackTrace();
        }finally{
            if(br != null){
                try { 
                    br.close(); 
                }catch(Exception e){};
            }
        }
			int id;double value; boolean more=true;
			Scanner se=new Scanner(System.in);
			System.out.println("Listed: \nVegetable:ID");
			for(Map.Entry<String, Integer> entry : data.entrySet())
			{
            System.out.println( entry.getKey() + ":" + entry.getValue() ); 
			}
			do{
			System.out.println("Enter the Veg_ID to Set Unit Price");
			id=se.nextInt();
			System.out.println("Enter the Unit Price of "+id);
			value=se.nextDouble();
			m.put(id,value);
			System.out.println("Do you Need to Set Price For Other Vegetables (enter 'y'or 'n'):");
			more=se.next().toUpperCase().charAt(0)=='Y'; 
			}while(more);
			        BufferedWriter bf = null;
		try{
            File file = Unit_price; 
           bf = new BufferedWriter( new FileWriter(file) );   //create new BufferedWriter for the output file
             for(Map.Entry<Integer,Double> entry : m.entrySet()){   //iterating map entries
                bf.write( entry.getKey() + ":" + entry.getValue() );   //put key and value separated by a colon
                bf.newLine();
            }
            bf.flush();
			}catch(IOException e){
            e.printStackTrace();
			}finally{
            try{
			bf.close();
            }catch(Exception e){}
        }
			}	
	void update_Inventory(File Inventory_list,File Vegetable_Id){
		Map<Integer,Double> m=new TreeMap<Integer,Double>();
		BufferedReader br=null;
		try{
			File f=Inventory_list;
			if(!f.exists()) 
		 {
            f.createNewFile();
         }
			br=new BufferedReader(new FileReader(f));
			String line="";
			while((line=br.readLine())!=null){
				String[] part=line.split(":");
				Integer vegid = Integer.parseInt( part[0].trim()) ;
                Double kg = Double.parseDouble( part[1].trim()) ;
				if( !vegid.equals("") && !kg.equals("") )
                    m.put(vegid,kg);
				}
		}
				catch(Exception e){
            e.printStackTrace();
        }finally{
            if(br != null){
                try { 
                    br.close(); 
                }catch(Exception e){};
            }
        }
		
				Map<String,Integer> data=new HashMap<String,Integer>();
		try{
		br=null;
		
			File file= Vegetable_Id;
			br=new BufferedReader(new FileReader(file));
			String lines="";
			while((lines=br.readLine())!=null){
				String[] part=lines.split(":");
				String name = part[0].trim();
                Integer ID = Integer.parseInt( part[1].trim()) ;
				if( !name.equals("") && !ID.equals("") )
                    data.put(name,ID);
			}
	}
	catch(Exception e){
            e.printStackTrace();
        }finally{
            if(br != null){
                try { 
                    br.close(); 
                }catch(Exception e){};
            }
        }
		Scanner sd=new Scanner(System.in);
		boolean more=true;int a=0; double updated;
		do{
			System.out.println("Enter the Vegetable Name to Update Stock:");
			String veg= sd.nextLine().toUpperCase();
			System.out.println("Enter the Veg_Amount in kg:");
			double mass=sd.nextDouble();
			
			for(Map.Entry<String, Integer> entry : data.entrySet())
			{
				if(veg.equals(entry.getKey()))
				{
					a=entry.getValue(); 
				}
			}
			
			if(!m.containsKey(a)&&!data.containsKey(veg)){
				System.out.println(veg+ " does not exists in inventory::\nfirst Assign vegetableID and Unit Price");
			}
				if(!m.containsKey(a)&&data.containsKey(veg)){
					//System.out.println(veg+ " is New inventory::if Already Added \n continue...... \nor Else \nfirst Assign vegetableID and Unit Price");
					m.put(a,mass);
					
				}else{
					for(Map.Entry<Integer,Double> ent : m.entrySet()){
						if(a==(ent.getKey())){
							
							updated=mass+ent.getValue();
							m.put(a,updated);
						}
					}
				}
				System.out.println("Want to Update more vegetable? (enter 'y'or 'n'):");
			more=sd.next().toUpperCase().charAt(0)=='Y'; 
			sd.nextLine();
			}while(more);
			 BufferedWriter bf = null;
		try{
            File file2 = Inventory_list;
           bf = new BufferedWriter( new FileWriter(file2) );   //create new BufferedWriter for the output file
             for(Map.Entry<Integer,Double> entr : m.entrySet()){   //iterating map entries
                bf.write( entr.getKey() + ":" + entr.getValue() );   //put key and value separated by a colon
                bf.newLine();
            }
            bf.flush();
			}catch(IOException e){
            e.printStackTrace();
			}finally{
            try{
			bf.close();
            }catch(Exception e){}
        }
	}
public static Map<String,String> bill_num(File bill_Num){
		int i;String s="";
		Map<String,String> m=new HashMap<String,String>();
		m.put("Bill No","0");
		BufferedReader br=null;
		try{
			File file=bill_Num;
			if(!file.exists()) 
		 {
            file.createNewFile();
         }
			br=new BufferedReader(new FileReader(file));
			String line="";
			while((line=br.readLine())!=null){
				String[] part=line.split(":");
				String name = part[0].trim();
                String Num = part[1].trim() ;
				if( !name.equals("") && !Num.equals("") )
                    m.put(name,Num);
				i=Integer.parseInt(Num); 
			i=i+1;
			s=Integer.toString(i);
			
			break;
			}
			m.put("Bill No",s);
	}
	catch(Exception e){
            e.printStackTrace();
        }finally{
            if(br != null){
                try { 
                    br.close(); 
                }catch(Exception e){};
            }
        }
		BufferedWriter bf = null;
		try{
            File file = bill_Num; 
         if(!file.exists()) 
		 {
            file.createNewFile();
         }
				bf = new BufferedWriter( new FileWriter(file) );   //create new BufferedWriter for the output file
				for(Map.Entry<String,String> entry : m.entrySet()){   //iterating map entries
                bf.write( entry.getKey() + ":" + entry.getValue() );   //put key and value separated by a colon
                
            }
            bf.flush();
			}catch(IOException e){
            e.printStackTrace();
					}finally
					{
            try{
      
                bf.close();
            }catch(Exception e){}
        }
		return m;
}
void bill_header(File bill,File bill_Num ){
		Scanner sc =new Scanner(System.in);
		Map<String,String> header=bill_num(bill_Num);
		Date date = Calendar.getInstance().getTime();  
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");  
        String strDate = dateFormat.format(date);  
        header.put("Date",strDate);
		System.out.println("enter the Tech ID");
		String TechName= sc.nextLine().toUpperCase();
		header.put("Tech ID",TechName);
		System.out.println("enter the Branch Name");
		String Branch= sc.nextLine().toUpperCase();
		header.put("Branch",Branch);
		BufferedWriter bf = null;
		try{
            File file2 = bill; 
			if(!file2.exists()) 
		 {
            file2.createNewFile();
         }
           bf = new BufferedWriter( new FileWriter(file2,true) );   //create new BufferedWriter for the output file
             for(Map.Entry<String,String> entr : header.entrySet()){   //iterating map entries
                bf.write( entr.getKey() + ":" + entr.getValue() );   //put key and value separated by a colon
                bf.newLine();
            }
            bf.flush();
			}catch(IOException e){
            e.printStackTrace();
			}finally{
            try{
			bf.close();
            }catch(Exception e){}
        }
	}
void purchase(File Inventory_list,File Vegetable_Id,File Unit_price,File bill,File bill_Num){
	Map<Integer,Double> m=new TreeMap<Integer,Double>();
		BufferedReader br=null;
		try{
			File f=Inventory_list;
			if(!f.exists()) 
		 {
            f.createNewFile();
         }
			br=new BufferedReader(new FileReader(f));
			String line="";
			while((line=br.readLine())!=null){
				String[] part=line.split(":");
				Integer vegid = Integer.parseInt( part[0].trim()) ;
                Double kg = Double.parseDouble( part[1].trim()) ;
				if( !vegid.equals("") && !kg.equals("") )
                    m.put(vegid,kg);
				}
		}
				catch(Exception e){
            e.printStackTrace();
        }finally{
            if(br != null){
                try { 
                    br.close(); 
                }catch(Exception e){};
            }
        }
		Map<String,Integer> data=new HashMap<String,Integer>();
		try{
		br=null;
		
			File file=Vegetable_Id;
			br=new BufferedReader(new FileReader(file));
			String lines="";
			while((lines=br.readLine())!=null){
				String[] part=lines.split(":");
				String name = part[0].trim();     
                Integer ID = Integer.parseInt( part[1].trim()) ;
				if( !name.equals("") && !ID.equals("") )
                    data.put(name,ID);
			}
	}
	catch(Exception e){
            e.printStackTrace();
        }finally{
            if(br != null){
                try { 
                    br.close(); 
                }catch(Exception e){};
            }
        }
		Map<Integer,Double> rupees=new HashMap<Integer,Double>();
		try{
		br=null;
		
			File file=Unit_price;
			br=new BufferedReader(new FileReader(file));
			String lines1="";
			while((lines1=br.readLine())!=null){
				String[] part=lines1.split(":");
				Integer idi =Integer.parseInt(part[0].trim());
                Double price23 = Double.parseDouble( part[1].trim()) ;
				if( !idi.equals("") && !price23.equals("") )
                    rupees.put(idi,price23);
			}
	}
	catch(Exception e){
            e.printStackTrace();
        }finally{
            if(br != null){
                try { 
                    br.close(); 
                }catch(Exception e){};
            }
        }
		Scanner sd=new Scanner(System.in);
		boolean more=true;int a=0; double updated; String s=""; String veg=""; double mass=0.0; double d=0.0; double totalPrice=0.0; String totak="";
				ArrayList<String> purchasedData = new ArrayList<String>();
		bill_header(bill,bill_Num);
		do{
			System.out.println("Enter the Vegetable Name to Sell:");
			veg= sd.nextLine().toUpperCase();
			System.out.println("Enter the Veg_Amount in kg:");
			mass=sd.nextDouble();
			
			for(Map.Entry<String, Integer> entry : data.entrySet())
			{
				if(veg.equals(entry.getKey()))
				{
					a=entry.getValue(); 
				}
			}
				
				if(!m.containsKey(a)){
					System.out.println("OOPS!!No such vegetable in inventory");//m.put(a,mass);
				}else{
					for(Map.Entry<Integer,Double> ent : m.entrySet()){
						if(a==(ent.getKey())){
							
							updated=ent.getValue()-mass;
							m.put(a,updated);
						}
					}
				}
				for(Map.Entry<Integer,Double> run:rupees.entrySet()){
					if(a==(run.getKey())){
						d=run.getValue();
					}
				}
				totalPrice=mass*d;
				s="Product Name:"+veg+"\t\t"+"Product Unit Price:"+Double.toString(d)+"\t"+"Quantity:"+Double.toString(mass)+"\t"+"Price:"+Double.toString(totalPrice);
				String[] sarray=new String[1];
				sarray[0]=s;
				totak=sarray[0].toString();
				purchasedData.add(totak);
			System.out.println(" more vegetable? (enter 'y'or 'n'):");
			more=sd.next().toUpperCase().charAt(0)=='Y'; 
			sd.nextLine();
			}while(more);
			 BufferedWriter bf = null;
		try{
            File file2 = Inventory_list; 
           bf = new BufferedWriter( new FileWriter(file2) );   //create new BufferedWriter for the output file
             for(Map.Entry<Integer,Double> entr : m.entrySet()){   //iterating map entries
                bf.write( entr.getKey() + ":" + entr.getValue() );   //put key and value separated by a colon
                bf.newLine();
            }
            bf.flush();
			}catch(IOException e){
            e.printStackTrace();
			}finally{
            try{
			bf.close();
            }catch(Exception e){}
        }
		String totalData="";
		for(int y=0;y<purchasedData.size();y++){
			totalData=totalData+purchasedData.get(y)+"\n";
		}
		bf = null;
		try{
            File file21= bill; 
           bf = new BufferedWriter( new FileWriter(file21,true) );   //create new BufferedWriter for the output file
             bf.write(totalData);
             bf.newLine();
            
            bf.flush();
			}catch(IOException e){
            e.printStackTrace();
			}finally{
            try{
			bf.close();
            }catch(Exception e){}
        }
}
	
	public static void main(String args[])
	{
		MVPSuperMarket v=new MVPSuperMarket();
		boolean b=true;
		Scanner input=new Scanner(System.in);
		String path1="D:\\exercise\\Veg_ID.txt",
		path2="D:\\exercise\\Product_Unit_Price.txt",
		path3="D:\\exercise\\Inventory.txt",
		path4="D:\\exercise\\Bill_Number.txt",
		path5="D:\\exercise\\Bill.txt";
		
		File Vegetable_Id= new File(path1);
		File Unit_price= new File(path2);
		File Inventory_list= new File(path3);
		File bill_Num= new File(path4);
		File bill= new File(path5);
		

		while(b==true)
					{
					System.out.println("\nspecify the operation \n 1.ASSIGN NEW VEGTABLE ID \n 2.SET VEGETABLE UNIT PRICE \n 3.UPDATE INVENTORY \n 4.PURCHASE VEGETABLES \n 5.exit");
					int action=input.nextInt();
					switch(action)
								{
								case 1:v.assign_ID(Vegetable_Id);
								break;
								case 2:v.set_Price(Vegetable_Id,Unit_price);
								break;
								case 3:v.update_Inventory(Inventory_list,Vegetable_Id);
								break;
								case 4:v.purchase(Inventory_list,Vegetable_Id,Unit_price,bill,bill_Num);
								break;
								case 5: b=false;
								break;
								default: System.out.println("no such option");
								break;
								}
					}
	}
}
